<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[centos7安装svn服务端]]></title>
      <url>http://lijinya.xyz/2017/07/04/centos7%E5%AE%89%E8%A3%85svn%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      <content type="html"><![CDATA[<h2 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h2><pre><code>yum install subversion
</code></pre><h2 id="2-查看版本号"><a href="#2-查看版本号" class="headerlink" title="2.查看版本号"></a>2.查看版本号</h2><pre><code>svnserve --version
</code></pre><h2 id="3-创建svn版本库目录"><a href="#3-创建svn版本库目录" class="headerlink" title="3.创建svn版本库目录"></a>3.创建svn版本库目录</h2><pre><code>mkdir -p /var/svn/svnrepos
</code></pre><h2 id="4-创建版本库"><a href="#4-创建版本库" class="headerlink" title="4.创建版本库"></a>4.创建版本库</h2><pre><code>svnadmin create /var/svn/svnrepos
</code></pre><h2 id="5-执行上面命令后-目录内生成多个文件及文件夹，进入conf文件夹内"><a href="#5-执行上面命令后-目录内生成多个文件及文件夹，进入conf文件夹内" class="headerlink" title="5.执行上面命令后 目录内生成多个文件及文件夹，进入conf文件夹内"></a>5.执行上面命令后 目录内生成多个文件及文件夹，进入conf文件夹内</h2><a id="more"></a>
<h2 id="6-编辑passwd文件-在后面添加"><a href="#6-编辑passwd文件-在后面添加" class="headerlink" title="6.编辑passwd文件,在后面添加"></a>6.编辑passwd文件,在后面添加</h2><pre><code>jean = 123
</code></pre><h2 id="7-编辑authz文件，在后面添加"><a href="#7-编辑authz文件，在后面添加" class="headerlink" title="7.编辑authz文件，在后面添加"></a>7.编辑authz文件，在后面添加</h2><pre><code>[/]
jean=rw
意思是对版本库根目录有读写操作
</code></pre><h2 id="8-编辑svnserve-conf文件把下面几个注释打开"><a href="#8-编辑svnserve-conf文件把下面几个注释打开" class="headerlink" title="8.编辑svnserve.conf文件把下面几个注释打开"></a>8.编辑svnserve.conf文件把下面几个注释打开</h2><blockquote>
<p> anon-access = read #匿名用户可读<br>   auth-access = write #授权用户可写<br>   password-db = passwd #使用哪个文件作为账号文件<br>   authz-db = authz #使用哪个文件作为权限文件<br>   realm = /var/svn/svnrepos # 认证空间名，版本库所在目录   </p>
</blockquote>
<h2 id="9-启动svn版本库"><a href="#9-启动svn版本库" class="headerlink" title="9.启动svn版本库"></a>9.启动svn版本库</h2><pre><code>svnserve -d -r /var/svn/svnrepos
</code></pre><h2 id="10-在Windows上测试"><a href="#10-在Windows上测试" class="headerlink" title="10.在Windows上测试"></a>10.在Windows上测试</h2><blockquote>
<p>注意点：<br>1.url内填写的路径是 <code>svn://host(ip)/</code><br>    然后看这条命令 <code>svnserve -d -r /var/svn/svnrepos</code><br>    如果这条命令你写到了项目名称也就是仓库名称 地址就是<code>svn://host(ip)/</code><br>    如果你是这样写<code>svnserve -d -r /var/svn/</code><br>    那么地址就是<code>svn://host(ip)/svnrepos</code><br>2.如果连接失败解决办法<br>用systemctl检查服务器的防火墙配置：<br><code>firewall-cmd --list-all</code><br>如果没有telnet服务和3690端口，进行下面的命令<br><code>firewall-cmd --permanent --add-service=telnet</code><br><code>firewall-cmd --permanent --add-port=3690/tcp</code><br><code>firewall-cmd --reload</code></p>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> svn </tag>
            
            <tag> centos7 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[react基础]]></title>
      <url>http://lijinya.xyz/2017/06/23/%E5%A4%A7%E7%9A%84/</url>
      <content type="html"><![CDATA[<h1 id="jsx语法"><a href="#jsx语法" class="headerlink" title="jsx语法"></a>jsx语法</h1><blockquote>
<p>遇到{}按照js语法解析遇到&lt;&gt;按照xml语法解析</p>
</blockquote>
<h1 id="react组件"><a href="#react组件" class="headerlink" title="react组件"></a>react组件</h1><blockquote>
<ol>
<li>组件的首字母必须大写</li>
<li>return返回的view必须是HTMLview</li>
<li>在渲染的时候只能存在一个根标签</li>
<li>在组件中标签必须闭合，否则报错</li>
<li>组件与组件的嵌套</li>
<li>style样式的添加class需要改成className<br>+<a id="more"></a></li>
</ol>
</blockquote>
<h1 id="props"><a href="#props" class="headerlink" title="props"></a>props</h1><pre><code>//声明组件hello
 var Hello = React.createClass({
   render:function () {
   //通过props获得组件内属性title的值 进行判断
       var value = this.props.title;
       if (value == &apos;Hello&apos;){
           value = &apos;Hello&apos;;
       }else {
           value = &apos;我不是Hello&apos;
       }
       返回value值
       return &lt;p&gt;{value}&lt;/p&gt;
   }
});
//声明组件Jean
var Jean = React.createClass({
//对传入的数据做限制
   propTypes:{
   //限制为字符串
       name:React.PropTypes.string,
       //限制为number 且不为空
       age:React.PropTypes.number.isRequired
   },
   //对参数做初始化
   getDefaultProps:function () {
       return {
           name:&apos;jean&apos;
       }
   },
   //组件的视图
   render:function () {
       return (
               &lt;div&gt;
                   &lt;p&gt;{this.props.name}&lt;/p&gt;
                   &lt;p&gt;{this.props.age}&lt;/p&gt;
               &lt;/div&gt;
       )
   }
});
ReactDOM.render(
    &lt;div&gt;
        &lt;Jean age={20} /&gt;
        &lt;Hello title=&quot;Hello1&quot;/&gt;
    &lt;/div&gt;,
    document.getElementById(&apos;root&apos;)
)
</code></pre><h1 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h1><pre><code>var MyEvent = React.createClass({
//声明事件
   handerClick:function () {
       alert(&apos;HAHA&apos;);
   },
   //通过refs获取指定input内的值
   handerGetContent:function () {
      console.log(this.refs.inputref.value) ;
   },
   render:function () {
       return (
           &lt;div&gt;
           //给input添加ref属性 以便获取input内的值
               &lt;input type=&quot;text&quot; ref=&quot;inputref&quot;/&gt;
               //绑定事件没有onclick后面不能添加引号
               &lt;button onClick={this.handerGetContent}&gt;获取输入框的内容&lt;/button&gt;
               &lt;button onClick={this.handerClick}&gt;按钮&lt;/button&gt;
           &lt;/div&gt;
       )
   }
});
ReactDOM.render(
      &lt;MyEvent /&gt;  ,
    document.getElementById(&apos;root&apos;)
)
</code></pre><h1 id="状态state"><a href="#状态state" class="headerlink" title="状态state"></a>状态<em>state</em></h1><pre><code>  var MyState = React.createClass({
  //初始化状态值
    getInitialState:function(){
        return{
            content:true
        }
    },
    //通过事件修改状态值
    handlerClick:function(){
        this.setState({
            content: !this.state.content
        })
    },
    render:function(){
    //声明变量flag等于状态值
        var flag = this.state.content;
        return(
                &lt;div&gt;
                    &lt;p&gt;
                        {
                        //根据状态值修改视图
                            flag ? &quot;我是孙悟空&quot; : &quot;我是通臂猿猴&quot;
                        }
                    &lt;/p&gt;
                    //元素绑定点击事件
                    &lt;button onClick={this.handlerClick}&gt;出来吧，皮卡丘&lt;/button&gt;
                &lt;/div&gt;
        )
    }
});
ReactDOM.render(
        &lt;MyState /&gt;,
    document.getElementById(&quot;root&quot;)
)
</code></pre><h1 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h1><blockquote>
<p><strong>三个阶段：</strong>  </p>
<ol>
<li>Mounting：组件的渲染阶段  </li>
<li>Updating：组件的更新阶段  </li>
<li>Unmounting：组件的卸载阶段   <blockquote>
<p>  <strong>react分别为这三个状态提供了will和did两个函数</strong>  </p>
<ol>
<li>componentWillMount() 组件渲染前触发事件   </li>
<li>componentDidMount() 组件渲染后触发事件   </li>
<li>componentWillUpdate() 组件更新前触发事件    </li>
<li>componentDidUpdate() 组件更新后触发事件    </li>
<li>componentWillUnmount() 组件卸载前触发事件   </li>
<li>提供两个额外的生命周期函数</li>
<li>shouldComponentUpdate()</li>
<li>componentWillReceiveProps()</li>
</ol>
</blockquote>
</li>
</ol>
</blockquote>
<pre><code>var MyComponent = React.createClass({
    //初始化传入的参数
    getDefaultPoprs:function(){
      return{
        title:&quot;嘿嘿&quot;
      }
    },
    //初始化状态
    getInitialState:function(){
      return {
        mystate:&quot;初始化state&quot;
      }
    },
    componentWillMount:function(){
      console.log(&quot;组件渲染前&quot;);
    },
    componentDidMount:function(){
      console.log(&quot;组件渲染后&quot;);
    },
    componentWillUpdate:function(){
      console.log(&quot;组件更新前&quot;);
    },
    componentDidUpdate:function(){
      console.log(&quot;组件更新后&quot;);
    },
    componentWillReceiveProps:function(){
      console.log(&quot;属性发生改变&quot;);
    },
    shouldComponentUpdate:function(nextProps, nextState){
       return{

       }
    },
    componentWillUnmount:function(){
      console.log(&quot;组件卸载前&quot;);
    },

    handlerClick:function(){
      this.setState({
        mystate:&quot;我是改变之后的状态&quot;
      })
    },

    handlerSytle:function(){

    },

    render:function(){
      //样式
      var styleObj = {
        color:&quot;green&quot;,
        fontSize:&quot;30px&quot;,
        border:&quot;1px solid red&quot;
      }
      //所有的view层的更新，都必须通过state 因为只有状态值改变了 react才会更新视图
      return (
        &lt;div&gt;
          &lt;p style={{color:'red',fontSize:"25px"}}&gt;{this.state.mystate}&lt;/p&gt;
          &lt;p style={styleObj}&gt;我是组件&lt;/p&gt;
          &lt;p&gt;{this.props.title}&lt;/p&gt;
          &lt;button onClick={this.handlerClick}&gt;改变状态&lt;/button&gt;
          &lt;button onclick={this.handlerSytle}&gt;改变样式&lt;/button&gt;
        &lt;/div&gt;
      )
    }
  });
  ReactDOM.render(
    &lt;MyComponent title=&quot;哈哈&quot;/&gt;,
    document.getElementById(&quot;root&quot;)
  )
</code></pre><h1 id="生命周期结合ajax"><a href="#生命周期结合ajax" class="headerlink" title="生命周期结合ajax"></a>生命周期结合ajax</h1><blockquote>
<p><strong>使用ajax时注意修改this指向</strong>  </p>
<h4 id="生命周期图"><a href="#生命周期图" class="headerlink" title="生命周期图"></a>生命周期图</h4><p><img src="http://omnop4oru.bkt.clouddn.com/react%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE.jpg" alt="image"></p>
</blockquote>
<pre><code>//声明组件
var MyComponent = React.createClass({
//初始化参数
    getDefaultPoprs:function () {
        return{
            url:&apos;&apos;
        }
    },
    //初始化状态
    getInitialState:function () {
        return {
            imgurl:&apos;&apos;
        }
    },
    //ajax应该在组件渲染完成后进行
    componentDidMount:function () {
        $.ajax({
            type:&apos;get&apos;,
            url:this.props.url,
            success:function (data) {
                console.log(1);
                this.setState({
                    imgurl:data.banner[0].img
                })
            }.bind(this)  //修改this指向
        })
    },
    handlerClick:function () {
        this.setState({
            imgurl:&apos;http://iwen.wiki/sxtstu/blueberrypai/indexImg/banner2.jpg&apos;
        })
    },
    render:function () {
        return(
            &lt;div&gt;
                &lt;img src={this.state.imgurl} alt=&quot;&quot;/&gt;
                &lt;button onClick={this.handlerClick}&gt;更换图片&lt;/button&gt;
            &lt;/div&gt;
        )
    }
});
ReactDOM.render(
//传入请求地址
    &lt;MyComponent url=&quot;http://www.iwen.wiki/sxtstu/blueberrypai/getIndexBanner.php&quot;/&gt; ,
    document.getElementById(&apos;root&apos;)
)
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> react </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[LESS编译]]></title>
      <url>http://lijinya.xyz/2017/06/23/LESS%E7%BC%96%E8%AF%91/</url>
      <content type="html"><![CDATA[<blockquote>
<h3 id="命令行编译"><a href="#命令行编译" class="headerlink" title="命令行编译"></a>命令行编译</h3><pre><code>1.安装less
    $ cnpm install -g less
2.编译
    lessc 路径/*.less 路径/*.css
</code></pre><h3 id="考拉软件编译"><a href="#考拉软件编译" class="headerlink" title="考拉软件编译"></a>考拉软件编译</h3><a id="more"></a>
<h3 id="sublime-text3-安装编译插件"><a href="#sublime-text3-安装编译插件" class="headerlink" title="sublime text3 安装编译插件"></a>sublime text3 安装编译插件</h3></blockquote>
<pre><code>1.安装less高亮插件
    ctrl+shift+p&gt;
    install Package&gt;
    输入 less
    确认安装
2.安装Less2css插件：
    当保存less文件时可生成css文件，在编译出错时可提示错误信息。
    步骤同上 输入less2css
3.安装node环境
4.在cmd中
    $ npm install -g less
    $ npm install less-plugin-clean-css
5.重启sublime text3
</code></pre>]]></content>
      
        
        <tags>
            
            <tag> LESS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7mysql 开启远程连接]]></title>
      <url>http://lijinya.xyz/2017/06/22/centos7%E9%80%9A%E8%BF%87yum%E5%AE%89%E8%A3%85mysql%EF%BC%8C%E5%B9%B6%E6%8E%88%E6%9D%83%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      <content type="html"><![CDATA[<p><img src="http://omnop4oru.bkt.clouddn.com/centos-mysql.jpg" alt="mac"><br><a id="more"></a><br>本文来自<a href="http://blog.csdn.net/u012367513/article/details/40538267/" target="_blank" rel="external">L-二当家的</a></p>
<blockquote>
<h4 id="首先进入数据库"><a href="#首先进入数据库" class="headerlink" title="首先进入数据库"></a>首先进入数据库</h4><p>$ mysql -hlocalhost -uroot -p</p>
<h4 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h4><p>$ use mysql;</p>
<h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>$ grant all privileges on <em>.</em> to ‘root’@’%’ identified by ‘密码’;</p>
<h4 id="刷新数据库权限"><a href="#刷新数据库权限" class="headerlink" title="刷新数据库权限"></a>刷新数据库权限</h4><p>$ flush privileges;</p>
</blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[VMware12安装mac 遇到的几个坑]]></title>
      <url>http://lijinya.xyz/2017/04/09/VMware12%E5%AE%89%E8%A3%85mac-%E9%81%87%E5%88%B0%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9D%91/</url>
      <content type="html"><![CDATA[<p><img src="http://omnop4oru.bkt.clouddn.com/zatanMac03.jpg" alt="mac"><br><a id="more"></a></p>
<blockquote>
<h3 id="安装vmwarea解锁mac-os-选项补丁"><a href="#安装vmwarea解锁mac-os-选项补丁" class="headerlink" title="安装vmwarea解锁mac os 选项补丁"></a>安装vmwarea解锁mac os 选项补丁</h3><p>　　在使用vm安装mac os之前必须先运行<code>Unlocker208</code>否则在vm里无法选&gt;择系统类型为mac os 导致最终安装失败。双击运行如果失败的话，在cmd里&gt;运行win-install.cmd<br>   　　 1. 更改cmd的编码 cmd管理员运行 输入<code>chcp 936</code><br>   　　 2. cd 进入win-install.cmd 文件夹<br>   　　 3. 直接输入win-install</p>
</blockquote>
<p>　</p>
<blockquote>
<h3 id="配置好虚拟机后打开后显示蓝屏bootmanger问题"><a href="#配置好虚拟机后打开后显示蓝屏bootmanger问题" class="headerlink" title="配置好虚拟机后打开后显示蓝屏bootmanger问题"></a>配置好虚拟机后打开后显示蓝屏bootmanger问题</h3><p>　　选择的mac镜像问题 不可以用网上<code>dmg</code>格式的转化为<code>ios</code>格式，解决办法就是直接下载<code>cdr</code>格式的mac镜像</p>
</blockquote>
<p> 　</p>
<blockquote>
<h3 id="配置好虚拟机后不可直接运行"><a href="#配置好虚拟机后不可直接运行" class="headerlink" title="配置好虚拟机后不可直接运行"></a>配置好虚拟机后不可直接运行</h3> <p style="text-indent:2em;">找到在之前的创建新的虚拟机时，设置的虚拟机位置。打开该目录，找到OS X xx.xx.vmx文件，右键用记事本方式打开，找到 smc.present = “TRUE”在smc.present = “TRUE”后面，手动添加一句smc.version = 0,保存关闭 然后启动该虚拟机</p></blockquote>
]]></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[undefined与null的区别]]></title>
      <url>http://lijinya.xyz/2017/03/12/undefined%E4%B8%8Enull%E7%9A%84%E5%8C%BA%E5%88%AB-1/</url>
      <content type="html"><![CDATA[<p><img src="http://omnop4oru.bkt.clouddn.com/JavaScriptundenull.png" alt="Image Title"><br><a id="more"></a></p>
<h3 id="null表示”没有对象”，即该处不应该有值"><a href="#null表示”没有对象”，即该处不应该有值" class="headerlink" title="null表示”没有对象”，即该处不应该有值"></a>null表示”没有对象”，即该处不应该有值</h3><pre><code>（1） 作为函数的参数，表示该函数的参数不是对象。
（2） 作为对象原型链的终点。
</code></pre><h3 id="undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是："><a href="#undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：" class="headerlink" title="undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是："></a>undefined表示”缺少值”，就是此处应该有一个值，但是还没有定义。典型用法是：</h3><pre><code>（1）变量被声明了，但没有赋值时，就等于undefined。
（2) 调用函数时，应该提供的参数没有提供，该参数等于undefined。
（3）对象没有赋值的属性，该属性的值为undefined。
（4）函数没有返回值时，默认返回undefined。
</code></pre><h5 id="本文摘自阮一峰http-www-ruanyifeng-com-blog-2014-03-undefined-vs-null-html的博客"><a href="#本文摘自阮一峰http-www-ruanyifeng-com-blog-2014-03-undefined-vs-null-html的博客" class="headerlink" title="本文摘自阮一峰http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html的博客"></a>本文摘自阮一峰<a href="http://" target="_blank" rel="external">http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html</a>的博客</h5>]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我的第一篇博客]]></title>
      <url>http://lijinya.xyz/2017/03/12/first/</url>
      <content type="html"><![CDATA[<h1 id="欢迎进入我的个人博客"><a href="#欢迎进入我的个人博客" class="headerlink" title="欢迎进入我的个人博客"></a>欢迎进入我的个人博客</h1><h3 id="测试使用"><a href="#测试使用" class="headerlink" title="测试使用"></a>测试使用</h3><p><img src="http://omnop4oru.bkt.clouddn.com/22.jpg" alt="Image Title"><br><a id="more"></a></p>
]]></content>
      
        
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>http://lijinya.xyz/2017/03/11/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><a id="more"></a>
<h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
